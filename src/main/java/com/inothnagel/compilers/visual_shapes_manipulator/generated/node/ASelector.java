/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.inothnagel.compilers.visual_shapes_manipulator.generated.node;

import com.inothnagel.compilers.visual_shapes_manipulator.generated.analysis.*;

@SuppressWarnings("nls")
public final class ASelector extends PSelector
{
    private TIt _it_;

    public ASelector()
    {
        // Constructor
    }

    public ASelector(
        @SuppressWarnings("hiding") TIt _it_)
    {
        // Constructor
        setIt(_it_);

    }

    @Override
    public Object clone()
    {
        return new ASelector(
            cloneNode(this._it_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASelector(this);
    }

    public TIt getIt()
    {
        return this._it_;
    }

    public void setIt(TIt node)
    {
        if(this._it_ != null)
        {
            this._it_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._it_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._it_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._it_ == child)
        {
            this._it_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._it_ == oldChild)
        {
            setIt((TIt) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
